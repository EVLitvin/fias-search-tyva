with recursive cte as (
    select concat(aao1.typename, ' ', aao1.name) as address, aah1.objectid, aah1.parentobjid, aah1.path
    from tyva_schema.as_adm_hierarchy aah1
        inner join tyva_schema.as_addr_obj aao1 on aah1.objectid = aao1.objectid
    -- where aah1.parentobjid = 0 and aah1.isactive = 1
    union all
    select concat(cte.address, ' ', aao2.typename, ' ', aao2.name), aah2.objectid, aah2.parentobjid, aah2.path
    from tyva_schema.as_adm_hierarchy aah2
        inner join cte on cte.objectid = aah2.parentobjid
        inner join tyva_schema.as_addr_obj aao2 on aao2.objectid = aah2.objectid)
select address, path from cte;
--update tyva_schema.as_adm_hierarchy set (address) = (select path from cte where cte.parentobjid = as_adm_hierarchy.objectid);


CREATE EXTENSION IF NOT EXISTS pg_trgm; -- можно ли совместить pg_trgm и to_tsquery(?) или websearch_to_tsquery(?) или plainto_tsquery(?) или phraseto_tsquery(?)

---- есть ли смысл в добавлении нового столбца при объединении двух
ALTER TABLE IF EXISTS tyva_schema.as_addr_obj
    ADD COLUMN IF NOT EXISTS address text GENERATED ALWAYS AS (as_addr_obj.name || ' ' || as_addr_obj.typename) STORED;

---- в чём разница между
CREATE INDEX IF NOT EXISTS tyva_schema_as_addr_obj_on_name_and_typename_idx ON tyva_schema.as_addr_obj USING gin (name gin_trgm_ops, typename gin_trgm_ops);
CREATE INDEX IF NOT EXISTS tyva_schema_as_addr_obj_on_name_and_typename_idx ON tyva_schema.as_addr_obj USING gin (address gin_trgm_ops);

ALTER TABLE IF EXISTS tyva_schema.as_addr_obj
    ADD COLUMN IF NOT EXISTS textsearch_index_column tsvector GENERATED ALWAYS AS (
                setweight(to_tsvector('russian', coalesce(as_addr_obj.name, '')), 'A') || ' ' ||
                (setweight(to_tsvector('russian', coalesce(as_addr_obj.typename, '')), 'B'))) STORED;

CREATE INDEX IF NOT EXISTS textsearch_idx ON tyva_schema.as_addr_obj USING gin (textsearch_index_column);

------- поиск через ILIKE '%' || ? || '%' по address -------
WITH RECURSIVE full_address(objectid, address, textsearch_index_column, parentobjid) AS (
    SELECT aao1.objectid, aao1.address, aao1.textsearch_index_column, amh1.parentobjid
    FROM tyva_schema.as_addr_obj aao1
             INNER JOIN tyva_schema.as_mun_hierarchy amh1 ON aao1.objectid = amh1.objectid
    UNION ALL
    SELECT aao2.objectid, full_address.address || ' ' || aao2.address, aao2.textsearch_index_column, amh2.parentobjid
    FROM tyva_schema.as_addr_obj aao2
             INNER JOIN tyva_schema.as_mun_hierarchy amh2 ON aao2.objectid = amh2.objectid
             INNER JOIN full_address ON full_address.parentobjid = amh2.objectid
)
SELECT DISTINCT objectid, address, textsearch_index_column, parentobjid
FROM full_address
WHERE address ILIKE '%' || ? || '%'
ORDER BY address DESC LIMIT 100;

------- поиск через textsearch_index_column @@ to_tsquery(?) -------
WITH RECURSIVE full_address(objectid, address, textsearch_index_column, parentobjid) AS (
SELECT aao1.objectid, aao1.address, aao1.textsearch_index_column, amh1.parentobjid
FROM tyva_schema.as_addr_obj aao1
    INNER JOIN tyva_schema.as_mun_hierarchy amh1 ON aao1.objectid = amh1.objectid
        UNION ALL
        SELECT aao2.objectid, aao2.address, full_address.textsearch_index_column || ' ' || aao2.textsearch_index_column, amh2.parentobjid
        FROM tyva_schema.as_addr_obj aao2
            INNER JOIN tyva_schema.as_mun_hierarchy amh2 ON aao2.objectid = amh2.objectid
            INNER JOIN full_address ON full_address.parentobjid = amh2.objectid
)
SELECT DISTINCT objectid, address, textsearch_index_column, parentobjid
FROM full_address
WHERE textsearch_index_column @@ to_tsquery('russian', ?)
ORDER BY textsearch_index_column DESC LIMIT 100;

    // let data = [{id: 1, text: "Moscow"}, {id: 2, text: "Saint Petersburg"}, {id: 3, text: "Kazan"},
    //     {id: 4, text: "Yekaterinburg"}, {id: 5, text: "Rostov"}, {id: 6, text: "Samara"}];
    // $('#address').select2({
    //     placeholder: "Начните вводить адрес",
    //     data: data,
    //     minimumInputLength: 3,
    //     // multiple: true,
    //     cache: false,
    //     width: '1500px',
    //     height: '300px',
    //     dropdownCssClass: "bigdrop"
    // });